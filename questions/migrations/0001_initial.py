# Generated by Django 4.2.16 on 2025-10-09 06:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("examinations", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("single_choice", "Single Choice"),
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("numeric", "Numeric Answer"),
                            ("text", "Text Answer"),
                            ("matching", "Matching/Pairing"),
                            ("essay", "Essay"),
                        ],
                        max_length=20,
                    ),
                ),
                ("text", models.TextField(help_text="The question text")),
                (
                    "explanation",
                    models.TextField(
                        blank=True, help_text="Explanation shown after answering"
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="questions/"),
                ),
                (
                    "points",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "time_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time limit for this question in seconds",
                        null=True,
                    ),
                ),
                ("numeric_answer", models.FloatField(blank=True, null=True)),
                (
                    "numeric_tolerance",
                    models.FloatField(
                        default=0.0, help_text="Acceptable margin of error"
                    ),
                ),
                (
                    "matching_pairs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Correct pairs for matching questions",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("times_answered", models.PositiveIntegerField(default=0)),
                ("times_correct", models.PositiveIntegerField(default=0)),
                ("average_time_spent", models.FloatField(default=0.0)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="examinations.test",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Questions",
                "db_table": "questions_question",
                "ordering": ["test", "order"],
                "unique_together": {("test", "order")},
            },
        ),
        migrations.CreateModel(
            name="QuestionStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_attempts", models.PositiveIntegerField(default=0)),
                ("correct_attempts", models.PositiveIntegerField(default=0)),
                ("average_score", models.FloatField(default=0.0)),
                ("average_time_spent", models.FloatField(default=0.0)),
                ("median_time_spent", models.FloatField(default=0.0)),
                ("discrimination_index", models.FloatField(default=0.0)),
                ("difficulty_index", models.FloatField(default=0.0)),
                ("choice_distribution", models.JSONField(default=dict)),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                (
                    "question",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="questions.question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question Statistics",
                "verbose_name_plural": "Question Statistics",
                "db_table": "questions_questionstatistics",
            },
        ),
        migrations.CreateModel(
            name="Choice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "explanation",
                    models.TextField(
                        blank=True, help_text="Explanation for this choice"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "match_key",
                    models.CharField(
                        blank=True,
                        help_text="Key for matching questions",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="questions.question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Choice",
                "verbose_name_plural": "Choices",
                "db_table": "questions_choice",
                "ordering": ["question", "order"],
            },
        ),
        migrations.CreateModel(
            name="QuestionAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text_answer", models.TextField(blank=True)),
                ("numeric_answer", models.FloatField(blank=True, null=True)),
                ("matching_pairs", models.JSONField(blank=True, default=dict)),
                ("is_correct", models.BooleanField(default=False)),
                ("points_awarded", models.FloatField(default=0.0)),
                ("manually_graded", models.BooleanField(default=False)),
                ("grader_feedback", models.TextField(blank=True)),
                ("graded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "time_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent on this question in seconds"
                    ),
                ),
                ("answer_changed_count", models.PositiveIntegerField(default=0)),
                ("first_answered_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
                (
                    "attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="examinations.testattempt",
                    ),
                ),
                (
                    "graded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_answers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="questions.question",
                    ),
                ),
                (
                    "selected_choices",
                    models.ManyToManyField(
                        blank=True,
                        related_name="selected_in_answers",
                        to="questions.choice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question Answer",
                "verbose_name_plural": "Question Answers",
                "db_table": "questions_questionanswer",
                "unique_together": {("attempt", "question")},
            },
        ),
    ]
