# Generated by Django 4.2.16 on 2025-10-09 06:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("examinations", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TestResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("total_questions", models.PositiveIntegerField()),
                ("correct_answers", models.PositiveIntegerField(default=0)),
                ("incorrect_answers", models.PositiveIntegerField(default=0)),
                ("unanswered_questions", models.PositiveIntegerField(default=0)),
                ("partial_credit_questions", models.PositiveIntegerField(default=0)),
                ("points_earned", models.FloatField(default=0.0)),
                ("points_possible", models.PositiveIntegerField()),
                ("percentage_score", models.FloatField()),
                ("grade_letter", models.CharField(blank=True, max_length=2)),
                ("is_passed", models.BooleanField()),
                ("pass_threshold", models.FloatField()),
                ("time_allocated", models.PositiveIntegerField()),
                ("time_used", models.PositiveIntegerField()),
                ("time_efficiency", models.FloatField(default=0.0)),
                ("category_scores", models.JSONField(default=dict)),
                ("difficulty_breakdown", models.JSONField(default=dict)),
                ("percentile_rank", models.FloatField(blank=True, null=True)),
                ("class_rank", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "total_participants",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("certificate_issued", models.BooleanField(default=False)),
                (
                    "certificate_number",
                    models.CharField(blank=True, max_length=50, unique=True),
                ),
                ("certificate_date", models.DateTimeField(blank=True, null=True)),
                ("instructor_feedback", models.TextField(blank=True)),
                ("automated_feedback", models.TextField(blank=True)),
                ("improvement_areas", models.JSONField(default=list)),
                ("recommended_study_topics", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "attempt",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result",
                        to="examinations.testattempt",
                    ),
                ),
            ],
            options={
                "verbose_name": "Test Result",
                "verbose_name_plural": "Test Results",
                "db_table": "results_testresult",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("certificate_number", models.CharField(max_length=50, unique=True)),
                ("recipient_name", models.CharField(max_length=200)),
                ("test_title", models.CharField(max_length=200)),
                ("completion_date", models.DateField()),
                ("score_achieved", models.FloatField()),
                ("verification_code", models.CharField(max_length=100, unique=True)),
                ("is_verified", models.BooleanField(default=True)),
                (
                    "certificate_pdf",
                    models.FileField(blank=True, null=True, upload_to="certificates/"),
                ),
                ("template_used", models.CharField(default="default", max_length=100)),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("signature_hash", models.CharField(blank=True, max_length=256)),
                (
                    "issued_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="issued_certificates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "result",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificate",
                        to="results.testresult",
                    ),
                ),
            ],
            options={
                "verbose_name": "Certificate",
                "verbose_name_plural": "Certificates",
                "db_table": "results_certificate",
                "ordering": ["-issued_at"],
            },
        ),
        migrations.CreateModel(
            name="AnalyticsReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("custom", "Custom Range"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("user_group", models.CharField(blank=True, max_length=50)),
                ("total_attempts", models.PositiveIntegerField(default=0)),
                ("total_completions", models.PositiveIntegerField(default=0)),
                ("average_score", models.FloatField(default=0.0)),
                ("median_score", models.FloatField(default=0.0)),
                ("pass_rate", models.FloatField(default=0.0)),
                ("score_distribution", models.JSONField(default=dict)),
                ("time_analytics", models.JSONField(default=dict)),
                ("question_analytics", models.JSONField(default=dict)),
                ("user_performance", models.JSONField(default=dict)),
                ("performance_trends", models.JSONField(default=dict)),
                ("improvement_recommendations", models.JSONField(default=list)),
                (
                    "report_pdf",
                    models.FileField(blank=True, null=True, upload_to="reports/"),
                ),
                (
                    "report_excel",
                    models.FileField(blank=True, null=True, upload_to="reports/"),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("is_automated", models.BooleanField(default=False)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics_reports",
                        to="examinations.category",
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics_reports",
                        to="examinations.test",
                    ),
                ),
            ],
            options={
                "verbose_name": "Analytics Report",
                "verbose_name_plural": "Analytics Reports",
                "db_table": "results_analyticsreport",
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tests_taken", models.PositiveIntegerField(default=0)),
                ("tests_passed", models.PositiveIntegerField(default=0)),
                ("average_score", models.FloatField(default=0.0)),
                ("best_score", models.FloatField(default=0.0)),
                ("latest_score", models.FloatField(default=0.0)),
                (
                    "skill_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                ("mastery_percentage", models.FloatField(default=0.0)),
                ("total_study_time", models.PositiveIntegerField(default=0)),
                ("average_test_time", models.FloatField(default=0.0)),
                ("completed_topics", models.JSONField(default=list)),
                ("current_focus_areas", models.JSONField(default=list)),
                ("recommended_next_tests", models.JSONField(default=list)),
                ("achievements", models.JSONField(default=list)),
                ("badges_earned", models.JSONField(default=list)),
                ("streak_count", models.PositiveIntegerField(default=0)),
                ("first_attempt_date", models.DateField(blank=True, null=True)),
                ("last_activity_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="examinations.category",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Progress",
                "verbose_name_plural": "User Progress Records",
                "db_table": "results_userprogress",
                "ordering": ["-updated_at"],
                "unique_together": {("user", "category")},
            },
        ),
    ]
